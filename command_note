//show dir
ls -a
//初始化
git init
//show status
git status
//查看提交过的详细日志
git log
//只查看提交过的日志描述和版本号
git log -oneline
//配置git账号
git config --global user.name xxx
git config --global user.email xxx@qq.com
//查看配置列表
git list
//工作区添加到暂存区
git add index.html
git add .
git add *
//暂存区添加至版本库
git commit -m 'description'
//工作区直接提交至版本库
git commit -m 'description'
//将工作区修改的文件直接提交至版本库
git commit -am 'description'
//撤销上一次提交，并将暂存区的文件重新提交
git commit --amend 
---> 进入vim编辑器  可以修改文件提交描述和文件内容
//工作区错误或者放弃，即从暂存区返回到工作区
git checkout -- index.html
git checkout -- .
//撤销暂存区的提交,即从版本库返回到暂存区。
git reset HEAD index.html
git reset HEAD .
其中HEAD 可以替换为log日志中的版本号 至少为8位，即返回到指定的版本
//删除文件，将工作区和暂存区的文件删除
git rm index.html
//如果文件已被修改，将工作区和暂存区的都删除
git rm -f index.html
//如果文件已被修改，只将暂存区中的删除。
git rm --cached index.html
//重命名文件
//(前缀没有git，需要手动添加到暂存区)
mv index.html index2.html
//(前缀有git，工作区和暂存区都会被改动)
git mv index.html index2.html
//查看分支
git branch
//创建分支
git branch dev
//切换分支
git checkout dev
//删除分支
git branch -d dev
//修改分支名称
git branch -m dev dev2
//创建分支并切换至该分支
git branch checkout -b dev

//分支内容合并,在master分支下，将master分支和dev分支内容合并
git merge dev
//查看工作区和暂存区的差异
git diff
//查看暂存区和版本库的差异
git diff --staged
//查看两个版本之间的差异，选择log日志中的版本号进行比较，推荐使用8位长度以上
git diff  be70b52 c39e038
//查看两个分支的差异
git diff master dev

//在分支dev下，修改文件后还没有提交，不能切换到master分支上，需要执行git stash先保存修改记录，再切换master分支。
git stash
//在master分支切换回dev分支后，可以查询之前git stash保存的记录
git stash list
//将保存记录拉取下来,(stash@{0}是记录名称)
git stash apply stash@{0}
//或者拉取下来并且删除
git stash pop stash@{0}
